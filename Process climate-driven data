# #处理均值
# import xarray as xr
# import os
# vars = ['rlds','tasmax','tasmin']
# scn = ['126','585']
# # 1. 需要处理的 NetCDF 文件列表
# for v in vars:
#     for sc in scn:
#         nc_files = os.listdir("E:/ISIMIP/bios/"+v+"/mean/"+sc+"")
#         # 2. 打开并合并多个 nc 文件（保留所有维度）
#         datasets = [xr.open_dataset("E:/ISIMIP/bios/"+v+"/mean/"+sc+"/"+f) for f in nc_files]
#         # 3. 计算变量 A 的均值（dim=0 表示对文件维度求均值）
#         ds_mean = xr.concat(datasets, dim="new_dim").mean(dim="new_dim")
#         # 4. 保存到新的 NetCDF 文件
#         output_file = "E:/ISIMIP/bios/"+v+"/mean/"+v+sc+"_mean.nc"
#         ds_mean.to_netcdf(output_file)
#         # 5. 关闭数据集
#         for ds in datasets:
#             ds.close()
#         print(f"变量 A 的均值已计算并保存至 {output_file}")
#         #月均nc转年均nc
#         # 读取 nc 文件
#         ds = xr.open_dataset("E:/ISIMIP/bios/"+v+"/mean/"+v+sc+"_mean.nc")
#         # 确保 time 维度是 Datetime 格式
#         ds['time'] = xr.cftime_range(start='2015-01-01', periods=len(ds.time), freq='M')
#         # 计算年均值
#         ds_ann = ds.groupby("time.year").mean(dim="time")
#         # 另存为新的 nc 文件
#         ds_ann.to_netcdf("E:/ISIMIP/bios/"+v+"/mean/year"+sc+"_mean.nc")
#         print("转换完成，已保存为 output.nc")
#         # GDE掩膜 
#         import numpy as np
#         file_p = "E:/ISIMIP/bios/"+v+"/mean/year"+sc+"_mean.nc"
#         out_p = "E:/ISIMIP/bios/"+v+"/mean/year"+sc+"_GDE_mean.nc"
#         var = v
#         # 读取数据
#         data = xr.open_dataset(file_p)  # 你的原始数据
#         mask = xr.open_dataset("E:/ISIMIP/bios/GDE_30min.nc")  # 掩膜数据
#         # 假设掩膜变量名为 'mask'，需要和数据的 lat/lon 维度匹配
#         mask_var = mask["gde"]
#         # 如果 mask 具有 time 维度但只是单一时间步，去掉 time 维度
#         if "time" in mask_var.dims:
#             mask_var = mask_var.squeeze("time")
#         # 确保掩膜的纬度/经度和数据匹配
#         mask_var = mask_var.interp_like(data)
#         # 选择需要掩膜的变量
#         A_masked = data[var].where(mask_var == 1)  # 掩膜：0 的位置变 NaN
#         # 创建新的数据集
#         masked_data = data.copy()
#         masked_data[var] = A_masked
#         # 保存新 nc 文件
#         masked_data.to_netcdf(out_p)
#         print(out_p)
